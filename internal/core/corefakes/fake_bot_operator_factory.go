// Code generated by counterfeiter. DO NOT EDIT.
package corefakes

import (
	"sync"

	"github.com/ivan1993spb/snake-bot/internal/core"
)

type FakeBotOperatorFactory struct {
	NewStub        func(int) core.BotOperator
	newMutex       sync.RWMutex
	newArgsForCall []struct {
		arg1 int
	}
	newReturns struct {
		result1 core.BotOperator
	}
	newReturnsOnCall map[int]struct {
		result1 core.BotOperator
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBotOperatorFactory) New(arg1 int) core.BotOperator {
	fake.newMutex.Lock()
	ret, specificReturn := fake.newReturnsOnCall[len(fake.newArgsForCall)]
	fake.newArgsForCall = append(fake.newArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.NewStub
	fakeReturns := fake.newReturns
	fake.recordInvocation("New", []interface{}{arg1})
	fake.newMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBotOperatorFactory) NewCallCount() int {
	fake.newMutex.RLock()
	defer fake.newMutex.RUnlock()
	return len(fake.newArgsForCall)
}

func (fake *FakeBotOperatorFactory) NewCalls(stub func(int) core.BotOperator) {
	fake.newMutex.Lock()
	defer fake.newMutex.Unlock()
	fake.NewStub = stub
}

func (fake *FakeBotOperatorFactory) NewArgsForCall(i int) int {
	fake.newMutex.RLock()
	defer fake.newMutex.RUnlock()
	argsForCall := fake.newArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBotOperatorFactory) NewReturns(result1 core.BotOperator) {
	fake.newMutex.Lock()
	defer fake.newMutex.Unlock()
	fake.NewStub = nil
	fake.newReturns = struct {
		result1 core.BotOperator
	}{result1}
}

func (fake *FakeBotOperatorFactory) NewReturnsOnCall(i int, result1 core.BotOperator) {
	fake.newMutex.Lock()
	defer fake.newMutex.Unlock()
	fake.NewStub = nil
	if fake.newReturnsOnCall == nil {
		fake.newReturnsOnCall = make(map[int]struct {
			result1 core.BotOperator
		})
	}
	fake.newReturnsOnCall[i] = struct {
		result1 core.BotOperator
	}{result1}
}

func (fake *FakeBotOperatorFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newMutex.RLock()
	defer fake.newMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBotOperatorFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ core.BotOperatorFactory = new(FakeBotOperatorFactory)
