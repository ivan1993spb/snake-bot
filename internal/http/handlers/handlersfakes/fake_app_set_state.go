// Code generated by counterfeiter. DO NOT EDIT.
package handlersfakes

import (
	"context"
	"sync"

	"github.com/ivan1993spb/snake-bot/internal/http/handlers"
)

type FakeAppSetState struct {
	SetOneStub        func(context.Context, int, int) (map[int]int, error)
	setOneMutex       sync.RWMutex
	setOneArgsForCall []struct {
		arg1 context.Context
		arg2 int
		arg3 int
	}
	setOneReturns struct {
		result1 map[int]int
		result2 error
	}
	setOneReturnsOnCall map[int]struct {
		result1 map[int]int
		result2 error
	}
	SetStateStub        func(context.Context, map[int]int) (map[int]int, error)
	setStateMutex       sync.RWMutex
	setStateArgsForCall []struct {
		arg1 context.Context
		arg2 map[int]int
	}
	setStateReturns struct {
		result1 map[int]int
		result2 error
	}
	setStateReturnsOnCall map[int]struct {
		result1 map[int]int
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAppSetState) SetOne(arg1 context.Context, arg2 int, arg3 int) (map[int]int, error) {
	fake.setOneMutex.Lock()
	ret, specificReturn := fake.setOneReturnsOnCall[len(fake.setOneArgsForCall)]
	fake.setOneArgsForCall = append(fake.setOneArgsForCall, struct {
		arg1 context.Context
		arg2 int
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.SetOneStub
	fakeReturns := fake.setOneReturns
	fake.recordInvocation("SetOne", []interface{}{arg1, arg2, arg3})
	fake.setOneMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAppSetState) SetOneCallCount() int {
	fake.setOneMutex.RLock()
	defer fake.setOneMutex.RUnlock()
	return len(fake.setOneArgsForCall)
}

func (fake *FakeAppSetState) SetOneCalls(stub func(context.Context, int, int) (map[int]int, error)) {
	fake.setOneMutex.Lock()
	defer fake.setOneMutex.Unlock()
	fake.SetOneStub = stub
}

func (fake *FakeAppSetState) SetOneArgsForCall(i int) (context.Context, int, int) {
	fake.setOneMutex.RLock()
	defer fake.setOneMutex.RUnlock()
	argsForCall := fake.setOneArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeAppSetState) SetOneReturns(result1 map[int]int, result2 error) {
	fake.setOneMutex.Lock()
	defer fake.setOneMutex.Unlock()
	fake.SetOneStub = nil
	fake.setOneReturns = struct {
		result1 map[int]int
		result2 error
	}{result1, result2}
}

func (fake *FakeAppSetState) SetOneReturnsOnCall(i int, result1 map[int]int, result2 error) {
	fake.setOneMutex.Lock()
	defer fake.setOneMutex.Unlock()
	fake.SetOneStub = nil
	if fake.setOneReturnsOnCall == nil {
		fake.setOneReturnsOnCall = make(map[int]struct {
			result1 map[int]int
			result2 error
		})
	}
	fake.setOneReturnsOnCall[i] = struct {
		result1 map[int]int
		result2 error
	}{result1, result2}
}

func (fake *FakeAppSetState) SetState(arg1 context.Context, arg2 map[int]int) (map[int]int, error) {
	fake.setStateMutex.Lock()
	ret, specificReturn := fake.setStateReturnsOnCall[len(fake.setStateArgsForCall)]
	fake.setStateArgsForCall = append(fake.setStateArgsForCall, struct {
		arg1 context.Context
		arg2 map[int]int
	}{arg1, arg2})
	stub := fake.SetStateStub
	fakeReturns := fake.setStateReturns
	fake.recordInvocation("SetState", []interface{}{arg1, arg2})
	fake.setStateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAppSetState) SetStateCallCount() int {
	fake.setStateMutex.RLock()
	defer fake.setStateMutex.RUnlock()
	return len(fake.setStateArgsForCall)
}

func (fake *FakeAppSetState) SetStateCalls(stub func(context.Context, map[int]int) (map[int]int, error)) {
	fake.setStateMutex.Lock()
	defer fake.setStateMutex.Unlock()
	fake.SetStateStub = stub
}

func (fake *FakeAppSetState) SetStateArgsForCall(i int) (context.Context, map[int]int) {
	fake.setStateMutex.RLock()
	defer fake.setStateMutex.RUnlock()
	argsForCall := fake.setStateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAppSetState) SetStateReturns(result1 map[int]int, result2 error) {
	fake.setStateMutex.Lock()
	defer fake.setStateMutex.Unlock()
	fake.SetStateStub = nil
	fake.setStateReturns = struct {
		result1 map[int]int
		result2 error
	}{result1, result2}
}

func (fake *FakeAppSetState) SetStateReturnsOnCall(i int, result1 map[int]int, result2 error) {
	fake.setStateMutex.Lock()
	defer fake.setStateMutex.Unlock()
	fake.SetStateStub = nil
	if fake.setStateReturnsOnCall == nil {
		fake.setStateReturnsOnCall = make(map[int]struct {
			result1 map[int]int
			result2 error
		})
	}
	fake.setStateReturnsOnCall[i] = struct {
		result1 map[int]int
		result2 error
	}{result1, result2}
}

func (fake *FakeAppSetState) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.setOneMutex.RLock()
	defer fake.setOneMutex.RUnlock()
	fake.setStateMutex.RLock()
	defer fake.setStateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAppSetState) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handlers.AppSetState = new(FakeAppSetState)
